[directories]
#directory where the training data will be retrieved
train_data = /home/user/Documents/VII_Sem/Data_Mining/Data_Mining_Project/librispeech/s5/data/dev_clean
#directory where the testing data will be retrieved
test_data = /home/user/Documents/VII_Sem/Data_Mining/Data_Mining_Project/librispeech/s5/data/dev_clean_test
#directory where the training features will be stored and retrieved
train_features = /home/user/Documents/VII_Sem/Data_Mining/Data_Mining_Project/librispeech/s5/data/dev_clean
#directory where the testing features will be stored and retrieved
test_features = /home/user/Documents/VII_Sem/Data_Mining/Data_Mining_Project/librispeech/s5/data/dev_clean_test
#directory where the language model will be retrieved
language = /esat/spchdisk/scratch/vrenkens/code/tfkaldi/data/aurora4/lang
#directory where the language model will be retrieved that is used to create the decoding graph
language_test = /esat/spchdisk/scratch/vrenkens/code/tfkaldi/data/aurora4/lang_test_tgpr_5k
#directory where the all the data from this experiment will be stored (logs, models, ...)
expdir = /home/user/Documents/VII_Sem/Data_Mining/Data_Mining_Project/expdir
#path to the kaldi egs folder
kaldi_egs = /esat/spchdisk/scratch/vrenkens/kaldi/egs/wsj/s5

[dnn-features]
#name of the features. If you want to use the GMM features, give it the same name
name = feature
#feature type options: mfcc, fbank and ssc
type = fbank
#the dynamic information that is added to the features, options are nodelta, delta and ddelta
dynamic = nodelta
#length of the sliding window (seconds)
winlen = 0.025
#step of the sliding window (seconds)
winstep = 0.01
#number of fbank filters
nfilt = 40
#number of fft bins
nfft = 512
#low cuttof frequency
lowfreq = 0
#hight cutoff frequency, if -1 set to None
highfreq = -1
#premphesis
preemph = 0.97
#include energy in features
include_energy = False
#snip the edges for sliding window
snip_edges = True

[nnet]
#name of the neural net
name = CTC_DNN_reg
#number of neurons in the hidden layers
num_units = 256
#number of hidden layers
num_layers = 1
#starting step, set to 'final' to skip nnet training
starting_step = 0
#number of passes over the entire database
num_epochs = 20
#initial learning rate of the neural net
initial_learning_rate = 1e-3
#exponential weight decay parameter
learning_rate_decay = 1
#size of the minibatch (#utterances)
batch_size = 128
#to limit memory ussage (specifically for GPU) the batch can be devided into
#even smaller batches. The gradient will be calculated by averaging the
#gradients of all these mini-batches. This value is the size of these
#mini-batches in number of utterances. For optimal speed this value should be
#set as high as possible without exeeding the memory. To use the entire batch
#set to -1
numutterances_per_minibatch = 16
#size of the validation set, set to 0 if you don't want to use one
valid_batches = 2
#frequency of evaluating the validation set. CATION: If the valid_frequency is
#more than 5 times larger than the checkpoint frequency the validated model
#will be deleted by the saver
valid_frequency = 50
#if you want to adapt the learning rate based on the validation set, set to True
valid_adapt = True
#number of times the learning will retry (with half learning rate) before terminating the training
valid_retries = 3
#how many steps are taken between two checkpoints
check_freq = 20
#you can visualise the progress of the neural net with tensorboard
visualise = True
#the beam width for the decoding
beam_width = 100
